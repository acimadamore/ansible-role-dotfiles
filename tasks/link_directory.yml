---
- name: Define dotfiles_directory_name
  ansible.builtin.set_fact:
    dotfiles_directory_name: "{{ dotfiles_directory.path | basename }}"

- name: Look for dotfiles in {{ dotfiles_directory.path }}
  ansible.builtin.find:
    paths: "{{ dotfiles_directory.path }}"
    use_regex: yes
  register: dotfiles_directory_files

- name: Look for regular files in {{ dotfiles_home }}/.{{ dotfiles_directory_name }}
  ansible.builtin.find:
    paths: "{{ dotfiles_home }}/.{{ dotfiles_directory_name }}"
    use_regex: yes
    patterns: "{{ dotfiles_directory_files.files | selectattr('isreg') | map(attribute='path') | map('basename') }}"
  register: home_directory_regular_files

- name: Create .{{ dotfiles_directory_name }} directory in {{ dotfiles_home }}
  ansible.builtin.file:
    path: "{{ dotfiles_home }}/.{{ dotfiles_directory_name }}"
    state: directory

- name: Delete regular files from {{ dotfiles_home }}/.{{ dotfiles_directory_name }}
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ home_directory_regular_files.files }}"

- name: Link dotfiles into {{ dotfiles_home }}/.{{ dotfiles_directory_name }}
  ansible.builtin.file:
    src: "{{ file.path }}"
    dest: "{{ dotfiles_home }}/.{{ dotfiles_directory_name }}/{{ file.path | basename }}"
    state: link
  with_items: "{{ dotfiles_directory_files.files }}"
  loop_control:
    label: "{{ file.path }}"
    loop_var: file
